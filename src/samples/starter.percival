This is a Percival notebook (https://percival.ink/).

╔═╣ Markdown
# Welcome to Percival!

Percival is an interactive in-browser notebook for **declarative data analysis** and **visualization**. It combines the power of compiled [Datalog](https://en.wikipedia.org/wiki/Datalog) queries with the flexibility of [modern plotting libraries](https://observablehq.com/@observablehq/plot) for the web.

![Picture of a landscape](https://upload.wikimedia.org/wikipedia/commons/e/ee/Lake_Geneva_after_storm.jpg)

This notebook is fully interactive! Here are the controls:

- Edit the contents of any cell in the code editor, and press Shift+Enter to save.
- Toggle source code visibility and delete cells in the left gutter.
- Create new cells by hovering your mouse in an empty space and clicking the popup.

To get started, let's dive into the basics of the language.

╔═╣ Markdown
## Intro to Datalog

Datalog is a fully-featured database query language, similar to SQL. It originates from logic programming as a subset of Prolog. The basic object in Datalog is called a _relation_, and it is the equivalent of a table in traditional databases.

Let's create a very simple relation that stores edges in a directed graph. This relation has two named fields, `x` and `y`.

╔═╡ Code
// Edge relation: each line is a database entry.
edge(x: 1, y: 2).
edge(x: 2, y: 3).
edge(x: 2, y: 4).

╔═╣ Markdown
With Datalog, you can compute all paths within this graph by writing the query in the following code cell. This query consists of two _rules_, which use the `:-` notation. When we run this query, its outputs are displayed above the cell.

╔═╡ Code
// Given an edge x -> y, there is a path x -> y.
path(x, y) :- edge(x, y).

// Given an edge x -> z and a path z -> y, there is a path x -> y.
path(x, y) :- edge(x, y: z), path(x: z, y).

╔═╣ Markdown
One of Percival's key features is _reactivity_. Try changing the first code cell by adding the following line, which introduces a new entry to the database:
```
edge(x: 4, y: 5).
```
After that, press Shift+Enter to save you work. What happens? You should see the results of the `path` cell change as well, since its dependent relation `edge` was updated.

**Exercise:** Now it's your turn. See if you can understand what the following query is doing, and try to modify it to also return direct connections to node 1.

╔═╡ Code
// Find all "friends of friends" of node 1 in the graph.
friends1(friend_of_friend) :-
  edge(x: 1, y: friend),
  edge(x: friend, y: friend_of_friend).

╔═╣ Markdown
## Embedding Code

These examples show the core of Datalog in its purest form, a programming language based on the relational algebra. However, to do real-world data analysis, we need to support other operations, like arithmetic, strings, and other standard data types!

Percival handles this situation by allowing you to seamlessly embed JavaScript expressions within queries. These are delimited by backquotes.

╔═╡ Code
name(full_name: `first + " " + last`, sqrt_age) :-
  person(first, last, age),
  sqrt_age = `Math.sqrt(age)`.

person(first: "Eric", last: "Zhang", age: 20).
person(first: "Foo", last: "Bar", age: 45).
person(first: "Baz", last: "Lam", age: 12).

╔═╣ Markdown
For a more complex example, here is how you would find all paths of length _at most 10_ inside a directed graph.

╔═╡ Code
walk(x: v, y: v, len: 0) :- edge(x: v).
walk(x: v, y: v, len: 0) :- edge(y: v).

// What happens to the output of this rule if we add a cycle to the graph?
walk(x, y, len) :-
  walk(x, y: z, len: len1),
  edge(x: z, y),
  len = `len1 + 1`,
  `len <= 10`.

╔═╣ Markdown
Here's one more fun example of arithmetic in rules: computing Fibonacci numbers! You can try changing the value of `max_n` to see how quickly the result is updated.

Don't worry about slowing down the website, since Percival runs on Web Workers isolated from your browser's main render thread.

╔═╡ Code
max_n(value: 30).

╔═╡ Code
fib(n: 0, v: 0).
fib(n: 1, v: 1).
fib(n: `n + 1`, v) :-
  fib(n, v: v1),
  fib(n: `n - 1`, v: v2),
  v = `v1 + v2`,
  max_n(value),
  `n < value`.

╔═╣ Markdown
## Aggregates

Not only can you do mathematical operations in queries, but you can also perform _aggregates_. In this version, supported aggregates include `sum`, `min`, `max`, `mean`, and `count`.

For this example, we're going to import a publicly available dataset about cars from NPM. Percival allows you to load any public JSON dataset from GitHub, NPM, or standard HTTPS web link.

╔═╡ Code
import cars from "npm://vega-datasets@2.1.0/data/cars.json"

country(name: Origin) :- cars(Origin).

╔═╣ Markdown
For each year and country of origin in the dataset, we will query for the average fuel economy of cars. This might let us answer questions about how fuel economy changes over time between the countries.

╔═╡ Code
average_mpg(country, year: `new Date(year)`, value) :-
  country(name: country),
  cars(Year: year),
  value = mean[Miles_per_Gallon] {
    cars(Origin: country, Year: year, Miles_per_Gallon)
  }.

╔═╣ Markdown
With support for aggregates, we can now answer a lot of analytical questions about the data. One key tool for exploring datasets is visualization. Percival supports declarative data visualization through _Plot_ cells, which run JavaScript code that generates diagrams using the [Observable Plot](https://github.com/observablehq/plot) library.

╔═╡ Plot
average_mpg => Plot.line(average_mpg, {
  sort: "year",
  x: "year",
  y: "value",
  stroke: "country",
}).plot({ grid: true })

╔═╣ Markdown
Here's another example of a plot on our dataset. This time, we'll make a simple scatter plot on the entire cars dataset, faceted by the country of origin.

╔═╡ Plot
cars => Plot.plot({
  marks: [
    Plot.dot(cars, {
      x: "Horsepower",
      y: "Miles_per_Gallon",
      stroke: "Weight_in_lbs",
      strokeWidth: 1.5,
    }),
    Plot.ruleX([40]),
    Plot.ruleY([5]),
  ],
  facet: {
    data: cars,
    y: "Origin",
  },
  color: {
    type: "linear",
    range: ["steelblue", "orange"],
    interpolate: "hcl",
  },
  grid: true,
})

╔═╣ Markdown
## Real-World Case Study

Let's see how all of these pieces fit together to work on a real-world dataset, where you might want to combine data from multiple different sources.

╔═╣ Markdown
### Initial Exploration

Suppose that you just got access to a collection of data about airports, and you're eager to start exploring it. The dataset is tabular and contains information such as name, geographical location, city, state, and country.

╔═╡ Code
import airports from "npm://vega-datasets@2.1.0/data/airports.csv"

╔═╣ Markdown
From looking at the rows, it seems like there are airports from multiple different countries in this dataset! Let's figure out what the value counts in the `country` column look like.

╔═╡ Code
airports_per_country(country, count) :-
  airports(country),
  count = count[1] { airports(country) }.

╔═╣ Markdown
It turns out that **all but 4 of the airports are in the United States**. To make the rest of our analysis simpler, we're going to filter only those airports that have country equal to `"USA"`. We're also going to reduce our columns to only the necessary ones.

╔═╡ Code
us_airports(state, iata, name) :-
  airports(state, iata, name, country: "USA").

╔═╣ Markdown
Cool, that was really simple! Let's use another aggregate query to see how many airports are in each US state.

╔═╡ Code
airports_per_state(state, count) :-
  us_airports(state),
  count = count[1] { us_airports(state) }.

╔═╡ Plot
airports_per_state => Plot.plot({
  marks: [
    Plot.dot(airports_per_state, {
      x: "count",
      fill: "steelblue",
      fillOpacity: 0.6,
    }),
  ],
  grid: true,
})

╔═╣ Markdown
It seems like most states have between 0-100 airports, with a few outliers having 200-300 airports. This makes sense, given that some states are much smaller than others, and even between states of the same size, population density can be very different!

╔═╣ Markdown
### Loading More Data

We might wonder if states with higher populations have more airports. However, we don't have this information in our current table, so we'll need to find a new dataset for this. [Here's one](https://github.com/jakevdp/data-USstates) that we found, off-the-shelf, on GitHub.

_(I quickly updated some of the column names in these tables to make them compatible with Percival, which is why the latter two tables are imported from Gists.)_

╔═╡ Code
import state_abbrevs from "gh://jakevdp/data-USstates@b9c5dfa/state-abbrevs.csv"
import state_areas from "https://gist.githubusercontent.com/ekzhang/a68794f064594cf0ab56a317c3b7d121/raw/state-areas.csv"
import state_population from "https://gist.githubusercontent.com/ekzhang/a68794f064594cf0ab56a317c3b7d121/raw/state-population.csv"

╔═╣ Markdown
Since this dataset consists of multiple tables in a slightly different format, we'll need to construct an inner join between these tables and our airports to combine them together. Luckily, this is very simple to do with a Datalog query!

╔═╡ Code
airports_state_info(state, count, population, area) :-
  state_abbrevs(state: name, abbreviation: state),
  airports_per_state(count, state),
  state_population(state, population, ages: "total", year: 2013),
  state_areas(state: name, area_sq_mi: area).

╔═╡ Plot
airports_state_info => Plot.plot({
  marks: [
    Plot.dot(airports_state_info, {
      x: "population",
      y: "count",
      r: "area",
      fill: "steelblue",
      fillOpacity: 0.8,
      title: "state",
    }),
    Plot.text(airports_state_info, {
      x: "population",
      y: "count",
      textAnchor: "start",
      dx: "1em",
      text: "state",
      fillColor: "#222",
      fillOpacity: 0.8,
      fontSize: d => Math.sqrt(d.area) / 50,
    }),
    Plot.ruleY([0]),
    Plot.ruleX([0]),
  ],
  grid: true,
})

╔═╣ Markdown
As you can see, there is a clear direct relationship between the size of a state, its population, and the number of airports in that state. The one exception to this relationship is **Alaska (AK)**, where although the population is very small, it has over 260 airports! We're also able to see that **Texas (TX)** and **California (CA)** have the second and third largest number of airports, respectively.

╔═╣ Markdown
## Closing

Thanks for reading! Percival is at an experimental stage. If you have any comments or feedback, you can reach me at [GitHub Discussions](https://github.com/ekzhang/percival) or on Twitter [@ekzhang1](https://twitter.com/ekzhang1).

If you like the ideas behind Percival, feel free to try it out on your own problems! By the way, if you press the "Share" button at the top of this page, you'll get a permanent link to the current notebook. Unlike Jupyter or R exports, these documents are fully interactive, and you only need a browser to continue exploring where you left off. ✨
